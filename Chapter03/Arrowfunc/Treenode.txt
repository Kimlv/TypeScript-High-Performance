class TreeNode {
     public data: number;
     public left: TreeNode;
     public right: TreeNode;

       constructor(data: number) {
        this.data = data;
        this.left = this.right = null;
       }

         public printData1(): void {
           console.log(this.data);
           console.log('this (TreeNode): ', this);
          }

         public printData2 = (): void => {
          console.log(this.data);
          console.log('this (TreeNode): ', this);
         }
      }

    // class Tree
    class Tree {
      private root: TreeNode;

      constructor() {
       this.root = null;
      }

      public constructTree(): void {
       this.root = new TreeNode(10);
       this.root.left = new TreeNode(5);
       this.root.right = new TreeNode(15);
      }

      public treeTraverser1(): () => void {
       const traverseTree_R = function (node: TreeNode): void {
       if (node == null) return;
       console.log(node.data);
       traverseTree_R(node.left);
       traverseTree_R(node.right);
      }
        return function () {
         traverseTree_R(this.root);
      }
     }

      public treeTraverser2(): () => void {
        const traverseTree_R = (node: TreeNode): void => {
        if (node == null) return;
        console.log(node.data);
        traverseTree_R(node.left);
        traverseTree_R(node.right);
       }
         return () => {
          traverseTree_R(this.root);
        }
      }

      public printRoot(nodePrinter: () => void): void {
       console.log(this.root.data);
       console.log('this (Tree): ', this);
       nodePrinter();
      }
    }